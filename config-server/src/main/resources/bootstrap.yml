server:
  port: 8888

management:
  endpoints:
    web:
      exposure:
        include: "*"

spring:
  application:
    name: config-server
  profiles:
    active: git
  cloud:
    config:
      server:
        git:
          uri: https://github.com/srikanthrachala/spring-cloud-config-auto-refresh.git
          clone-on-start: true
          force-pull: true
          username:
          password:
          skip-ssl-validation: true
          timeout: 4
          search-paths: "config-repo/{application}/"
        encrypt:
          enabled: false

  # Spring Cloud Bus - Kafka configuration
    bus:
      enabled: true
      refresh:
        enabled: true
      trace:
        enabled: true
    stream:
      kafka:
        bootstrap-brokers: http://localhost:9092
      bindings:
        springCloudBusInput:
          destination: ENV.APPNAME.CONFIG.BUS
        springCloudBusOutput:
          destination: ENV.APPNAME.CONFIG.BUS


# Below configuration can be used to hold property files location in config server itself and can be used for
# both git and native profiles. If git server is down, it can retrieve files from local location.

#spring:
#  application:
#    name: config-server
#  profiles:
#    active: git, native
#  cloud:
#    config:
#      server:
#        git:
#          uri: https://github.com/srikanthrachala/spring-cloud-config-auto-refresh.git
#          clone-on-start: true
#          force-pull: true
#          username:
#          password:
#          skip-ssl-validation: true
#          timeout: 4
#          search-paths: "config-server/runtime/resources/{application}/"
#            order: 1
#        native:
#          search-locations: file:./runtime/resources/{application}
#            order: 2
#        encrypt:
#          enabled: false
#    # Spring Cloud Bus - Kafka configuration
#    bus:
#      enabled: true
#      refresh:
#        enabled: true
#      trace:
#        enabled: trues
#    stream:
#      kafka:
#        bootstrap-brokers: http://localhost:9092
#      bindings:
#        springCloudBusInput:
#          destination: ENV.APPNAME.CONFIG.BUS
#        springCloudBusOutput:
#          destination: ENV.APPNAME.CONFIG.BUS




